<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jeff Bursik</title>
    <description>Jeff's Blog and Site</description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 11 Dec 2016 21:21:06 -0600</pubDate>
    <lastBuildDate>Sun, 11 Dec 2016 21:21:06 -0600</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>My 2016 Accomplishments: What did I work on, What did I learn, and What did I accomplish?</title>
        <description>&lt;h3 id=&quot;new-skills&quot;&gt;New Skills&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;I had never written a line of code.  I now lead a team and hired 4 Java contractors, 3 of which could easily become employees, and am a key contributor to my teams’ code base.&lt;/li&gt;
  &lt;li&gt;I had never checked in code.  I now lead code reviews for my team, write a GitHub hosted blog, and teach others how to use GitHub.&lt;/li&gt;
  &lt;li&gt;I had never created a JAVA program.  I have written my platforms’ search service, all but 2 ingestion methods, a template-service, revised all of the code automation, and teach experienced team members my methods. Also have become fluent in the Spring architecture and the benefits it offers.&lt;/li&gt;
  &lt;li&gt;I had never written a unit test.  I learned Mockito, Junit, and the Spock framework.  I am fluent in Spock unit tests and write them on all code bases.  I have also recently learned how to write integration tests to become a test driven developer.&lt;/li&gt;
  &lt;li&gt;I had never written a Groovy program.  I have now learned and rewrote my team’s Jenkins DSL in complete Groovy syntax which also required to learn the Jenkins DSL.  I also write all Spock unit tests and integration tests using Groovy.&lt;/li&gt;
  &lt;li&gt;I have never stood up an architecture.  I have now stood up, architected (based on pervious design), and iterated on by incorporating my own architecture which is driving the future of my team’s product.&lt;/li&gt;
  &lt;li&gt;I have never used Elasticsearch, Logstash, or Kibana.  I have learned to use Elasticsearch’s REST APIs, Elasticsearch’s JAVA API, written several Logstash filters, and turned the Logstash data into decision driving/critical product Kibana dashboards for my team.  I am viewed as a key Elasticsearch team member on my team and have created an internal HipChat Elasticsearch room which I actively contribute too.&lt;/li&gt;
  &lt;li&gt;I have used Jenkins to automate jobs before however I have never used Jenkin’s DSL language before.  I have created our team’s Jenkins platform in 2 days compared to 2 other dedicated DevOps team members that took 2+ weeks.  This also included an automated Logstash job log parser.&lt;/li&gt;
  &lt;li&gt;I spent 9 months as a MicroStrategy Architect.  I have since taught my company’s MicroStrategy Architects about the MicroStrategy JAVA APIs and contributed to MicroStrategy open forum conversations pertaining to the JAVA APIs.&lt;/li&gt;
  &lt;li&gt;I have led technical review conversations pertaining to all aspects of the code base for my project.&lt;/li&gt;
  &lt;li&gt;I have written 2 products for my company on my free time in an effort to learn new technology.  One was called Answer-Bot, a natural language instant answer Business Intelligence tool.  The other, an abbreviation-service used to generate natural language from standard abbreviations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;new-development&quot;&gt;New Development&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;I had never led a team.  I was trained and led my team for 6 months as Scrum Master and was a fully dedicated Engineer.&lt;/li&gt;
  &lt;li&gt;I am viewed as the Technical lead for my team’s project and have the respect of all team members.&lt;/li&gt;
  &lt;li&gt;I have lead my team in innovation ideas and generated a positive, fun, and successful environment where people are motivated to deliver while learning.&lt;/li&gt;
  &lt;li&gt;I have lead my personal development investing in new technology and finding lead edge tech to bring to my team.&lt;/li&gt;
  &lt;li&gt;I have influenced non-technical peers to learn to code and motivate them to drive for results in other ways.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;where-i-want-to-go-in-2017&quot;&gt;Where I want to go in 2017&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;I want to be a Software Architect, driving the direction of the team while still delivering on a life changing product.&lt;/li&gt;
  &lt;li&gt;I want to contribute to open source projects and deliver an open source product of my own.&lt;/li&gt;
  &lt;li&gt;I want to earn the respect of my peers through the code I write and how I motivate them to be better at what they do.&lt;/li&gt;
  &lt;li&gt;I want to teach others what I did to be successful and how I did it.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 11 Dec 2016 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//life/2016/12/11/My-2016-Accomplishments.html</link>
        <guid isPermaLink="true">http://localhost:4000//life/2016/12/11/My-2016-Accomplishments.html</guid>
        
        <category>Life</category>
        
        <category>Development</category>
        
        <category>Accomplishments</category>
        
        
        <category>Life</category>
        
      </item>
    
      <item>
        <title>Jenkins Coded and Tested</title>
        <description>&lt;p&gt;Jenkins, while great, has its limitations if you don’t build it correctly.  Several teams, products, etc. use Jenkins for a CI/CD tool and set up jobs through the Web Interface however then there is extra work to back up the jobs, save it somewhere, etc.  And, how do they ensure a job is set and not later changed over the course of time?  Well, it’s simple… you use the Jenkins DSL.&lt;/p&gt;

&lt;p&gt;Jenkins DSL is domain specific language and is basically a coded Jenkins job interface.  You still install Jenkins as usual however all jobs are saved into a code repository, pretty awesome huh?  My team introduced this to me and it’s pretty slick.  However the problem for me, I like to test and develop locally which means I need a Jenkins instance running on the Mac that then reads from my Git Repository and builds all my necessary jobs.&lt;/p&gt;

&lt;p&gt;Alright, here is how it’s done, on a Mac:&lt;/p&gt;

&lt;p&gt;Keep in mind, this worked for me however there were some struggles along the way.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download Jenkins: https://jenkins.io/content/thank-you-downloading-os-x-installer/&lt;/li&gt;
  &lt;li&gt;Jenkins will download under a new username ‘Jenkins’ (this took me a little while to figure out)&lt;/li&gt;
  &lt;li&gt;Log into the new Jenkins user &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo su Jenkins&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Generate an ssh key: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ssh-keygen&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Save the ssh key into the GitHub repository&lt;/li&gt;
  &lt;li&gt;Jenkins should be running after the install at loclhost:8080, open and log in.&lt;/li&gt;
  &lt;li&gt;Download all the GitHub plugins you would like to use (for this purpose and at this time I used Git Plugin)&lt;/li&gt;
  &lt;li&gt;Set up a Global User Credential with the Id that you just created the SSH key for.&lt;/li&gt;
  &lt;li&gt;Create a job and point the SCM to you github account.&lt;/li&gt;
  &lt;li&gt;You should have some fun cloning now!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now to the DSL.. to be continued…&lt;/p&gt;

&lt;p&gt;Tips:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To stop Jenkins &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;To start Jenkins &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 10 Dec 2016 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//code/2016/12/10/Jenkins-DSL-Mac-Setup.html</link>
        <guid isPermaLink="true">http://localhost:4000//code/2016/12/10/Jenkins-DSL-Mac-Setup.html</guid>
        
        <category>FirstBlog</category>
        
        <category>HowToBlog</category>
        
        <category>jekyll</category>
        
        
        <category>Code</category>
        
      </item>
    
      <item>
        <title>How I started...</title>
        <description>&lt;p&gt;In the true nature of why I started this blog, I’m going to document how to get started.  But first, bare with me while I give you the “why I started doing this” memo…&lt;/p&gt;

&lt;p&gt;So, I started this because I’ve been an engineer for all but 9 months now and have had my fair amount of struggles getting started.  Plus, I’m in a leadership position where I interview more experienced individuals and it seems like everyone has a site similar to this. And now, this is me giving back.  I’m going to document code I write, things I learn, and just general thoughts as I go.  Ok, thanks for sticking through this…&lt;/p&gt;

&lt;p&gt;Here are the steps to create the site (I used a Mac so command lines may differ between platforms):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a GitHub account if you haven’t already.  It’s free, so no issue.&lt;/li&gt;
  &lt;li&gt;Create a new repository following this format: username.github.io&lt;/li&gt;
  &lt;li&gt;Clone the repository (where username is what you defined in step 2)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git clone https://github.com/username/username.github.io
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Fork/Clone the jalpc_jekyll_theme repository:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ git clone https://github.com/&amp;lt;your githubname&amp;gt;/jalpc_jekyll_theme.git
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Navigate into the forked/cloned repository and download jekyll
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ gem install jekyll bundler
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now copy the contents of the jekyll clone and put in the repository you created in step 1&lt;/li&gt;
  &lt;li&gt;Check in all the code and GitHub will host the site for you.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s that simple.  Now have fun and customize to your needs.  Some tips:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Blogs are stored in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory.&lt;/li&gt;
  &lt;li&gt;Site html code (which really doesn’t need to be touched unless you want to change it) is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; directory.&lt;/li&gt;
  &lt;li&gt;All main page documentation is the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file&lt;/li&gt;
  &lt;li&gt;If your main pages aren’t taking place, I had to modify the html because it was pointing to a JSON file.  This was in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site/blog/index.html&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;To run and refresh your build locally, run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve --watch&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 08 Dec 2016 00:00:00 -0600</pubDate>
        <link>http://localhost:4000//life/2016/12/08/Blog-Setup.html</link>
        <guid isPermaLink="true">http://localhost:4000//life/2016/12/08/Blog-Setup.html</guid>
        
        <category>FirstBlog</category>
        
        <category>HowToBlog</category>
        
        <category>jekyll</category>
        
        
        <category>Life</category>
        
      </item>
    
  </channel>
</rss>
